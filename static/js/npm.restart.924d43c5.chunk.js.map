{"version":3,"sources":["../node_modules/@restart/hooks/esm/useMounted.js","../node_modules/@restart/hooks/esm/usePrevious.js","../node_modules/@restart/context/forwardRef.js","../node_modules/@restart/hooks/esm/useWillUnmount.js","../node_modules/@restart/hooks/esm/useUpdatedRef.js","../node_modules/@restart/hooks/esm/useCommittedRef.js","../node_modules/@restart/hooks/esm/useEventCallback.js"],"names":["useMounted","mounted","isMounted","current","usePrevious","value","ref","exports","__esModule","default","renderFn","_temp","_ref","propTypes","defaultProps","_ref$allowFallback","allowFallback","_ref$displayName","displayName","name","render","props","Object","assign","_react","forwardRef","obj","useWillUnmount","fn","onUnmount","valueRef","useUpdatedRef","useEventCallback","apply","arguments"],"mappings":"2FAAA,6CAsBe,SAASA,IACtB,IAAIC,EAAU,kBAAO,GACjBC,EAAY,kBAAO,WACrB,OAAOD,EAAQE,WAOjB,OALA,qBAAU,WACR,OAAO,WACLF,EAAQE,SAAU,KAEnB,IACID,EAAUC,U,iCChCnB,6CAmBe,SAASC,EAAYC,GAClC,IAAIC,EAAM,iBAAO,MAIjB,OAHA,qBAAU,WACRA,EAAIH,QAAUE,KAETC,EAAIH,U,iCCtBbI,EAAQC,YAAa,EACrBD,EAAQE,QAUR,SAAoBC,EAAUC,GAC5B,IAAIC,OAAiB,IAAVD,EAAmB,GAAKA,EAC/BE,EAAYD,EAAKC,UACjBC,EAAeF,EAAKE,aACpBC,EAAqBH,EAAKI,cAC1BA,OAAuC,IAAvBD,GAAwCA,EACxDE,EAAmBL,EAAKM,YACxBA,OAAmC,IAArBD,EAA8BP,EAASS,MAAQT,EAASQ,YAAcD,EAEpFG,EAAS,SAAgBC,EAAOf,GAClC,OAAOI,EAASW,EAAOf,IAGzB,OAAOgB,OAAOC,OAAOC,EAAOf,QAAQgB,aAAeT,EAAgBQ,EAAOf,QAAQgB,WAAWL,GAAU,SAAUC,GAC/G,OAAOD,EAAOC,EAAO,OACpB,CACDH,YAAaA,EACbL,UAAWA,EACXC,aAAcA,KA1BlB,IAEgCY,EAF5BF,GAE4BE,EAFI,EAAQ,KAG5BA,EAAIlB,WAAakB,EAAM,CACnCjB,QAASiB,I,8ECAE,SAASC,EAAeC,GACrC,IAAIC,ECFS,SAAuBxB,GACpC,IAAIyB,EAAW,iBAAOzB,GAEtB,OADAyB,EAAS3B,QAAUE,EACZyB,EDDSC,CAAcH,GAC9B,qBAAU,WACR,OAAO,WACL,OAAOC,EAAU1B,aAElB,M,6EEIU,MARf,SAAyBE,GACvB,IAAIC,EAAM,iBAAOD,GAIjB,OAHA,qBAAU,WACRC,EAAIH,QAAUE,IACb,CAACA,IACGC,GCdM,SAAS0B,EAAiBJ,GACvC,IAAItB,EAAM,EAAgBsB,GAC1B,OAAO,uBAAY,WACjB,OAAOtB,EAAIH,SAAWG,EAAIH,QAAQ8B,MAAM3B,EAAK4B,aAC5C,CAAC5B","file":"static/js/npm.restart.924d43c5.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react';\n/**\n * Track whether a component is current mounted. Generally less preferable than\n * properlly canceling effects so they don't run after a component is unmounted,\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\n *\n * @returns a function that returns the current isMounted state of the component\n *\n * ```ts\n * const [data, setData] = useState(null)\n * const isMounted = useMounted()\n *\n * useEffect(() => {\n *   fetchdata().then((newData) => {\n *      if (isMounted()) {\n *        setData(newData);\n *      }\n *   })\n * })\n * ```\n */\n\nexport default function useMounted() {\n  var mounted = useRef(true);\n  var isMounted = useRef(function () {\n    return mounted.current;\n  });\n  useEffect(function () {\n    return function () {\n      mounted.current = false;\n    };\n  }, []);\n  return isMounted.current;\n}","import { useEffect, useRef } from 'react';\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\n\nexport default function usePrevious(value) {\n  var ref = useRef(null);\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}","\"use strict\";\n\nexports.__esModule = true;\nexports.default = forwardRef;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction forwardRef(renderFn, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      propTypes = _ref.propTypes,\n      defaultProps = _ref.defaultProps,\n      _ref$allowFallback = _ref.allowFallback,\n      allowFallback = _ref$allowFallback === void 0 ? false : _ref$allowFallback,\n      _ref$displayName = _ref.displayName,\n      displayName = _ref$displayName === void 0 ? renderFn.name || renderFn.displayName : _ref$displayName;\n\n  var render = function render(props, ref) {\n    return renderFn(props, ref);\n  };\n\n  return Object.assign(_react.default.forwardRef || !allowFallback ? _react.default.forwardRef(render) : function (props) {\n    return render(props, null);\n  }, {\n    displayName: displayName,\n    propTypes: propTypes,\n    defaultProps: defaultProps\n  });\n}","import useUpdatedRef from './useUpdatedRef';\nimport { useEffect } from 'react';\n/**\n * Attach a callback that fires when a component unmounts\n *\n * @param fn Handler to run when the component unmounts\n * @category effects\n */\n\nexport default function useWillUnmount(fn) {\n  var onUnmount = useUpdatedRef(fn);\n  useEffect(function () {\n    return function () {\n      return onUnmount.current();\n    };\n  }, []);\n}","import { useRef } from 'react';\n/**\n * Returns a ref that is immediately updated with the new value\n *\n * @param value The Ref value\n * @category refs\n */\n\nexport default function useUpdatedRef(value) {\n  var valueRef = useRef(value);\n  valueRef.current = value;\n  return valueRef;\n}","import { useEffect, useRef } from 'react';\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded befor being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\n\nfunction useCommittedRef(value) {\n  var ref = useRef(value);\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nexport default useCommittedRef;","import { useCallback } from 'react';\nimport useCommittedRef from './useCommittedRef';\nexport default function useEventCallback(fn) {\n  var ref = useCommittedRef(fn);\n  return useCallback(function () {\n    return ref.current && ref.current.apply(ref, arguments);\n  }, [ref]);\n}"],"sourceRoot":""}