{"version":3,"sources":["../node_modules/mime-types/index.js"],"names":["db","extname","EXTRACT_TYPE_REGEXP","TEXT_TYPE_REGEXP","charset","type","match","exec","mime","toLowerCase","test","exports","charsets","lookup","contentType","str","indexOf","extension","exts","extensions","length","Object","create","path","substr","types","preference","undefined","keys","forEach","i","from","source","to","populateMaps"],"mappings":";2FAYA,IAAIA,EAAK,EAAQ,KAEbC,EAAU,EAAQ,KAAQA,QAO1BC,EAAsB,0BACtBC,EAAmB,WAwBvB,SAASC,EAAQC,GACf,IAAKA,GAAwB,kBAATA,EAClB,OAAO,EAIT,IAAIC,EAAQJ,EAAoBK,KAAKF,GACjCG,EAAOF,GAASN,EAAGM,EAAM,GAAGG,eAEhC,OAAID,GAAQA,EAAKJ,QACRI,EAAKJ,WAIVE,IAASH,EAAiBO,KAAKJ,EAAM,MAChC,QAjCXK,EAAQP,QAAUA,EAClBO,EAAQC,SAAW,CACjBC,OAAQT,GAEVO,EAAQG,YA0CR,SAAqBC,GAEnB,IAAKA,GAAsB,kBAARA,EACjB,OAAO,EAGT,IAAIP,GAA6B,IAAtBO,EAAIC,QAAQ,KAAcL,EAAQE,OAAOE,GAAOA,EAE3D,IAAKP,EACH,OAAO,EAIT,IAAiC,IAA7BA,EAAKQ,QAAQ,WAAmB,CAClC,IAAIZ,EAAUO,EAAQP,QAAQI,GAC1BJ,IAASI,GAAQ,aAAeJ,EAAQK,eAG9C,OAAOD,GA3DTG,EAAQM,UAqER,SAAmBZ,GACjB,IAAKA,GAAwB,kBAATA,EAClB,OAAO,EAIT,IAAIC,EAAQJ,EAAoBK,KAAKF,GAEjCa,EAAOZ,GAASK,EAAQQ,WAAWb,EAAM,GAAGG,eAEhD,IAAKS,IAASA,EAAKE,OACjB,OAAO,EAGT,OAAOF,EAAK,IAlFdP,EAAQQ,WAAaE,OAAOC,OAAO,MACnCX,EAAQE,OA2FR,SAAgBU,GACd,IAAKA,GAAwB,kBAATA,EAClB,OAAO,EAIT,IAAIN,EAAYhB,EAAQ,KAAOsB,GAAMd,cAAce,OAAO,GAE1D,IAAKP,EACH,OAAO,EAGT,OAAON,EAAQc,MAAMR,KAAc,GAtGrCN,EAAQc,MAAQJ,OAAOC,OAAO,MA8G9B,SAAsBH,EAAYM,GAEhC,IAAIC,EAAa,CAAC,QAAS,cAAUC,EAAW,QAChDN,OAAOO,KAAK5B,GAAI6B,SAAQ,SAAyBxB,GAC/C,IAAIG,EAAOR,EAAGK,GACVa,EAAOV,EAAKW,WAEhB,GAAKD,GAASA,EAAKE,OAAnB,CAKAD,EAAWd,GAAQa,EAEnB,IAAK,IAAIY,EAAI,EAAGA,EAAIZ,EAAKE,OAAQU,IAAK,CACpC,IAAIb,EAAYC,EAAKY,GAErB,GAAIL,EAAMR,GAAY,CACpB,IAAIc,EAAOL,EAAWV,QAAQhB,EAAGyB,EAAMR,IAAYe,QAC/CC,EAAKP,EAAWV,QAAQR,EAAKwB,QAEjC,GAAyB,6BAArBP,EAAMR,KAA8Cc,EAAOE,GAAMF,IAASE,GAAyC,iBAAnCR,EAAMR,GAAWO,OAAO,EAAG,KAE7G,SAKJC,EAAMR,GAAaZ,OAxIzB6B,CAAavB,EAAQQ,WAAYR,EAAQc","file":"static/js/npm.mime-types.222aa152.chunk.js","sourcesContent":["/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db');\n\nvar extname = require('path').extname;\n/**\n * Module variables.\n * @private\n */\n\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/;\nvar TEXT_TYPE_REGEXP = /^text\\//i;\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset;\nexports.charsets = {\n  lookup: charset\n};\nexports.contentType = contentType;\nexports.extension = extension;\nexports.extensions = Object.create(null);\nexports.lookup = lookup;\nexports.types = Object.create(null); // Populate the extensions/types maps\n\npopulateMaps(exports.extensions, exports.types);\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  } // TODO: use media-typer\n\n\n  var match = EXTRACT_TYPE_REGEXP.exec(type);\n  var mime = match && db[match[1].toLowerCase()];\n\n  if (mime && mime.charset) {\n    return mime.charset;\n  } // default text/* to utf-8\n\n\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8';\n  }\n\n  return false;\n}\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\n\nfunction contentType(str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false;\n  }\n\n  var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;\n\n  if (!mime) {\n    return false;\n  } // TODO: use content-type or other module\n\n\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime);\n    if (charset) mime += '; charset=' + charset.toLowerCase();\n  }\n\n  return mime;\n}\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\n\nfunction extension(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  } // TODO: use media-typer\n\n\n  var match = EXTRACT_TYPE_REGEXP.exec(type); // get extensions\n\n  var exts = match && exports.extensions[match[1].toLowerCase()];\n\n  if (!exts || !exts.length) {\n    return false;\n  }\n\n  return exts[0];\n}\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\n\nfunction lookup(path) {\n  if (!path || typeof path !== 'string') {\n    return false;\n  } // get the extension (\"ext\" or \".ext\" or full path)\n\n\n  var extension = extname('x.' + path).toLowerCase().substr(1);\n\n  if (!extension) {\n    return false;\n  }\n\n  return exports.types[extension] || false;\n}\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\n\nfunction populateMaps(extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana'];\n  Object.keys(db).forEach(function forEachMimeType(type) {\n    var mime = db[type];\n    var exts = mime.extensions;\n\n    if (!exts || !exts.length) {\n      return;\n    } // mime -> extensions\n\n\n    extensions[type] = exts; // extension -> mime\n\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i];\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source);\n        var to = preference.indexOf(mime.source);\n\n        if (types[extension] !== 'application/octet-stream' && (from > to || from === to && types[extension].substr(0, 12) === 'application/')) {\n          // skip the remapping\n          continue;\n        }\n      } // set the extension -> mime\n\n\n      types[extension] = type;\n    }\n  });\n}"],"sourceRoot":""}