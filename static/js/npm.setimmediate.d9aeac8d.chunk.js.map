{"version":3,"sources":["../node_modules/setimmediate/setImmediate.js"],"names":["global","setImmediate","registerImmediate","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","Object","getPrototypeOf","setTimeout","toString","call","process","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","messagePrefix","Math","random","onGlobalMessage","event","source","data","indexOf","slice","length","addEventListener","attachEvent","installPostMessageImplementation","MessageChannel","channel","port1","port2","installMessageChannelImplementation","createElement","html","documentElement","script","onreadystatechange","removeChild","appendChild","installReadyStateChangeImplementation","callback","Function","args","Array","arguments","i","task","clearImmediate","apply","run","self","this"],"mappings":"+EAAA,6BACE,aAEA,IAAIA,EAAOC,aAAX,CAIA,IAKIC,EALAC,EAAa,EAEbC,EAAgB,GAChBC,GAAwB,EACxBC,EAAMN,EAAOO,SAuKbC,EAAWC,OAAOC,gBAAkBD,OAAOC,eAAeV,GAC9DQ,EAAWA,GAAYA,EAASG,WAAaH,EAAWR,EAEf,qBAArC,GAAGY,SAASC,KAAKb,EAAOc,SAzF1BZ,EAAoB,SAA2Ba,GAC7CD,EAAQE,UAAS,WACfC,EAAaF,OAKnB,WAGE,GAAIf,EAAOkB,cAAgBlB,EAAOmB,cAAe,CAC/C,IAAIC,GAA4B,EAC5BC,EAAerB,EAAOsB,UAQ1B,OANAtB,EAAOsB,UAAY,WACjBF,GAA4B,GAG9BpB,EAAOkB,YAAY,GAAI,KACvBlB,EAAOsB,UAAYD,EACZD,GAwEAG,GApEX,WAIE,IAAIC,EAAgB,gBAAkBC,KAAKC,SAAW,IAElDC,EAAkB,SAAyBC,GACzCA,EAAMC,SAAW7B,GAAgC,kBAAf4B,EAAME,MAA2D,IAAtCF,EAAME,KAAKC,QAAQP,IAClFP,GAAcW,EAAME,KAAKE,MAAMR,EAAcS,UAI7CjC,EAAOkC,iBACTlC,EAAOkC,iBAAiB,UAAWP,GAAiB,GAEpD3B,EAAOmC,YAAY,YAAaR,GAGlCzB,EAAoB,SAA2Ba,GAC7Cf,EAAOkB,YAAYM,EAAgBT,EAAQ,MAmD7CqB,GACSpC,EAAOqC,eAhDlB,WACE,IAAIC,EAAU,IAAID,eAElBC,EAAQC,MAAMjB,UAAY,SAAUM,GAElCX,EADaW,EAAME,OAIrB5B,EAAoB,SAA2Ba,GAC7CuB,EAAQE,MAAMtB,YAAYH,IAyC5B0B,GACSnC,GAAO,uBAAwBA,EAAIoC,cAAc,UAtC5D,WACE,IAAIC,EAAOrC,EAAIsC,gBAEf1C,EAAoB,SAA2Ba,GAG7C,IAAI8B,EAASvC,EAAIoC,cAAc,UAE/BG,EAAOC,mBAAqB,WAC1B7B,EAAaF,GACb8B,EAAOC,mBAAqB,KAC5BH,EAAKI,YAAYF,GACjBA,EAAS,MAGXF,EAAKK,YAAYH,IAyBnBI,GApBA/C,EAAoB,SAA2Ba,GAC7CJ,WAAWM,EAAc,EAAGF,IAyBhCP,EAASP,aAxLT,SAAsBiD,GAEI,oBAAbA,IACTA,EAAW,IAAIC,SAAS,GAAKD,IAM/B,IAFA,IAAIE,EAAO,IAAIC,MAAMC,UAAUrB,OAAS,GAE/BsB,EAAI,EAAGA,EAAIH,EAAKnB,OAAQsB,IAC/BH,EAAKG,GAAKD,UAAUC,EAAI,GAI1B,IAAIC,EAAO,CACTN,SAAUA,EACVE,KAAMA,GAIR,OAFAhD,EAAcD,GAAcqD,EAC5BtD,EAAkBC,GACXA,KAqKTK,EAASiD,eAAiBA,EAlK1B,SAASA,EAAe1C,UACfX,EAAcW,GA8BvB,SAASE,EAAaF,GAGpB,GAAIV,EAGFM,WAAWM,EAAc,EAAGF,OACvB,CACL,IAAIyC,EAAOpD,EAAcW,GAEzB,GAAIyC,EAAM,CACRnD,GAAwB,EAExB,KAxCN,SAAamD,GACX,IAAIN,EAAWM,EAAKN,SAChBE,EAAOI,EAAKJ,KAEhB,OAAQA,EAAKnB,QACX,KAAK,EACHiB,IACA,MAEF,KAAK,EACHA,EAASE,EAAK,IACd,MAEF,KAAK,EACHF,EAASE,EAAK,GAAIA,EAAK,IACvB,MAEF,KAAK,EACHF,EAASE,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAChC,MAEF,QACEF,EAASQ,WA/DjB,EA+DkCN,IAmBxBO,CAAIH,GACJ,QACAC,EAAe1C,GACfV,GAAwB,MArFlC,CAwMmB,qBAATuD,KAAyC,qBAAX5D,EAAyB6D,KAAO7D,EAAS4D,Q","file":"static/js/npm.setimmediate.d9aeac8d.chunk.js","sourcesContent":["(function (global, undefined) {\n  \"use strict\";\n\n  if (global.setImmediate) {\n    return;\n  }\n\n  var nextHandle = 1; // Spec says greater than zero\n\n  var tasksByHandle = {};\n  var currentlyRunningATask = false;\n  var doc = global.document;\n  var registerImmediate;\n\n  function setImmediate(callback) {\n    // Callback can either be a function or a string\n    if (typeof callback !== \"function\") {\n      callback = new Function(\"\" + callback);\n    } // Copy function arguments\n\n\n    var args = new Array(arguments.length - 1);\n\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i + 1];\n    } // Store and register the task\n\n\n    var task = {\n      callback: callback,\n      args: args\n    };\n    tasksByHandle[nextHandle] = task;\n    registerImmediate(nextHandle);\n    return nextHandle++;\n  }\n\n  function clearImmediate(handle) {\n    delete tasksByHandle[handle];\n  }\n\n  function run(task) {\n    var callback = task.callback;\n    var args = task.args;\n\n    switch (args.length) {\n      case 0:\n        callback();\n        break;\n\n      case 1:\n        callback(args[0]);\n        break;\n\n      case 2:\n        callback(args[0], args[1]);\n        break;\n\n      case 3:\n        callback(args[0], args[1], args[2]);\n        break;\n\n      default:\n        callback.apply(undefined, args);\n        break;\n    }\n  }\n\n  function runIfPresent(handle) {\n    // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // \"too much recursion\" error.\n      setTimeout(runIfPresent, 0, handle);\n    } else {\n      var task = tasksByHandle[handle];\n\n      if (task) {\n        currentlyRunningATask = true;\n\n        try {\n          run(task);\n        } finally {\n          clearImmediate(handle);\n          currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  function installNextTickImplementation() {\n    registerImmediate = function registerImmediate(handle) {\n      process.nextTick(function () {\n        runIfPresent(handle);\n      });\n    };\n  }\n\n  function canUsePostMessage() {\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `global.postMessage` means something completely different and can't be used for this purpose.\n    if (global.postMessage && !global.importScripts) {\n      var postMessageIsAsynchronous = true;\n      var oldOnMessage = global.onmessage;\n\n      global.onmessage = function () {\n        postMessageIsAsynchronous = false;\n      };\n\n      global.postMessage(\"\", \"*\");\n      global.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n  }\n\n  function installPostMessageImplementation() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n\n    var onGlobalMessage = function onGlobalMessage(event) {\n      if (event.source === global && typeof event.data === \"string\" && event.data.indexOf(messagePrefix) === 0) {\n        runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n\n    if (global.addEventListener) {\n      global.addEventListener(\"message\", onGlobalMessage, false);\n    } else {\n      global.attachEvent(\"onmessage\", onGlobalMessage);\n    }\n\n    registerImmediate = function registerImmediate(handle) {\n      global.postMessage(messagePrefix + handle, \"*\");\n    };\n  }\n\n  function installMessageChannelImplementation() {\n    var channel = new MessageChannel();\n\n    channel.port1.onmessage = function (event) {\n      var handle = event.data;\n      runIfPresent(handle);\n    };\n\n    registerImmediate = function registerImmediate(handle) {\n      channel.port2.postMessage(handle);\n    };\n  }\n\n  function installReadyStateChangeImplementation() {\n    var html = doc.documentElement;\n\n    registerImmediate = function registerImmediate(handle) {\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var script = doc.createElement(\"script\");\n\n      script.onreadystatechange = function () {\n        runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n\n      html.appendChild(script);\n    };\n  }\n\n  function installSetTimeoutImplementation() {\n    registerImmediate = function registerImmediate(handle) {\n      setTimeout(runIfPresent, 0, handle);\n    };\n  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n\n\n  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.\n\n  if ({}.toString.call(global.process) === \"[object process]\") {\n    // For Node.js before 0.9\n    installNextTickImplementation();\n  } else if (canUsePostMessage()) {\n    // For non-IE10 modern browsers\n    installPostMessageImplementation();\n  } else if (global.MessageChannel) {\n    // For web workers, where supported\n    installMessageChannelImplementation();\n  } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n    // For IE 6â€“8\n    installReadyStateChangeImplementation();\n  } else {\n    // For older browsers\n    installSetTimeoutImplementation();\n  }\n\n  attachTo.setImmediate = setImmediate;\n  attachTo.clearImmediate = clearImmediate;\n})(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self);"],"sourceRoot":""}