{"version":3,"sources":["../node_modules/react-addons-update/index.js"],"names":["_assign","invariant","hasOwnProperty","ALL_COMMANDS_LIST","ALL_COMMANDS_SET","invariantArrayCase","value","spec","command","Array","isArray","specValue","forEach","module","exports","update","join","call","Object","keys","length","x","nextValue","concat","constructor","mergeObj","k","item","push","unshift","args","splice","apply"],"mappings":"0FAQA,IAAIA,EAAU,EAAQ,KAElBC,EAAY,EAAQ,KAEpBC,EAAiB,GAAGA,eAYxB,IAMIC,EAAoB,CANL,QACG,WACD,UACH,OACE,SACA,UAEhBC,EAAmB,GAKvB,SAASC,EAAmBC,EAAOC,EAAMC,GACvCP,EAAUQ,MAAMC,QAAQJ,GAAQ,0DAA2DE,EAASF,GACpG,IAAIK,EAAYJ,EAAKC,GACrBP,EAAUQ,MAAMC,QAAQC,GAAY,2GAAiHH,EAASG,GAPhKR,EAAkBS,SAAQ,SAAUJ,GAClCJ,EAAiBI,IAAW,KAqE9BK,EAAOC,QAvDP,SAASC,EAAOT,EAAOC,GAGrB,GAFAN,EAA0B,kBAATM,EAAmB,qHAA2HJ,EAAkBa,KAAK,MArBtK,QAuBZd,EAAee,KAAKV,EAvBR,QAyBd,OADAN,EAAuC,IAA7BiB,OAAOC,KAAKZ,GAAMa,OAAc,qDAxB5B,QAyBPb,EAAgB,KAGzB,IAzCmBc,EAyCfC,GAzCeD,EAyCSf,EAxCxBG,MAAMC,QAAQW,GACTA,EAAEE,SACAF,GAAkB,kBAANA,EACdrB,EAAQ,IAAIqB,EAAEG,YAAeH,GAE7BA,GAqCT,GAAInB,EAAee,KAAKV,EA7BN,UA6B4B,CAC5C,IAAIkB,EAAWlB,EAAkB,OACjCN,EAAUwB,GAAgC,kBAAbA,EAAuB,uDA/BpC,SA+B2GA,GAC3HxB,EAAUqB,GAAkC,kBAAdA,EAAwB,yDAhCtC,SAgC+GA,GAE/HtB,EAAQsB,EAAWf,EAAkB,QA+BvC,IAAK,IAAImB,KA5BLxB,EAAee,KAAKV,EAzCP,WA0CfF,EAAmBC,EAAOC,EA1CX,SA2CfA,EAAiB,MAAEK,SAAQ,SAAUe,GACnCL,EAAUM,KAAKD,OAIfzB,EAAee,KAAKV,EA/CJ,cAgDlBF,EAAmBC,EAAOC,EAhDR,YAiDlBA,EAAoB,SAAEK,SAAQ,SAAUe,GACtCL,EAAUO,QAAQF,OAIlBzB,EAAee,KAAKV,EArDL,aAsDjBN,EAAUQ,MAAMC,QAAQJ,GAAQ,4CAtDf,UAsD4EA,GAC7FL,EAAUQ,MAAMC,QAAQH,EAAmB,SAAI,sHAvD9B,UAuD0KA,EAAmB,SAC9MA,EAAmB,QAAEK,SAAQ,SAAUkB,GACrC7B,EAAUQ,MAAMC,QAAQoB,GAAO,sHAzDhB,UAyD4JvB,EAAmB,SAC9Le,EAAUS,OAAOC,MAAMV,EAAWQ,OAIlC5B,EAAee,KAAKV,EA3DN,YA4DhBN,EAAyC,oBAAxBM,EAAkB,OAAkB,0DA5DrC,SA4D+GA,EAAkB,QACjJe,EAAYf,EAAkB,OAAEe,IAGpBf,EACNH,EAAiBF,eAAewB,IAAMtB,EAAiBsB,KAC3DJ,EAAUI,GAAKX,EAAOT,EAAMoB,GAAInB,EAAKmB,KAIzC,OAAOJ","file":"static/js/npm.react-addons-update.df3c5471.chunk.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar hasOwnProperty = {}.hasOwnProperty;\n\nfunction shallowCopy(x) {\n  if (Array.isArray(x)) {\n    return x.concat();\n  } else if (x && typeof x === 'object') {\n    return _assign(new x.constructor(), x);\n  } else {\n    return x;\n  }\n}\n\nvar COMMAND_PUSH = '$push';\nvar COMMAND_UNSHIFT = '$unshift';\nvar COMMAND_SPLICE = '$splice';\nvar COMMAND_SET = '$set';\nvar COMMAND_MERGE = '$merge';\nvar COMMAND_APPLY = '$apply';\nvar ALL_COMMANDS_LIST = [COMMAND_PUSH, COMMAND_UNSHIFT, COMMAND_SPLICE, COMMAND_SET, COMMAND_MERGE, COMMAND_APPLY];\nvar ALL_COMMANDS_SET = {};\nALL_COMMANDS_LIST.forEach(function (command) {\n  ALL_COMMANDS_SET[command] = true;\n});\n\nfunction invariantArrayCase(value, spec, command) {\n  invariant(Array.isArray(value), 'update(): expected target of %s to be an array; got %s.', command, value);\n  var specValue = spec[command];\n  invariant(Array.isArray(specValue), 'update(): expected spec of %s to be an array; got %s. ' + 'Did you forget to wrap your parameter in an array?', command, specValue);\n}\n/**\n * Returns a updated shallow copy of an object without mutating the original.\n * See https://facebook.github.io/react/docs/update.html for details.\n */\n\n\nfunction update(value, spec) {\n  invariant(typeof spec === 'object', 'update(): You provided a key path to update() that did not contain one ' + 'of %s. Did you forget to include {%s: ...}?', ALL_COMMANDS_LIST.join(', '), COMMAND_SET);\n\n  if (hasOwnProperty.call(spec, COMMAND_SET)) {\n    invariant(Object.keys(spec).length === 1, 'Cannot have more than one key in an object with %s', COMMAND_SET);\n    return spec[COMMAND_SET];\n  }\n\n  var nextValue = shallowCopy(value);\n\n  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {\n    var mergeObj = spec[COMMAND_MERGE];\n    invariant(mergeObj && typeof mergeObj === 'object', \"update(): %s expects a spec of type 'object'; got %s\", COMMAND_MERGE, mergeObj);\n    invariant(nextValue && typeof nextValue === 'object', \"update(): %s expects a target of type 'object'; got %s\", COMMAND_MERGE, nextValue);\n\n    _assign(nextValue, spec[COMMAND_MERGE]);\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {\n    invariantArrayCase(value, spec, COMMAND_PUSH);\n    spec[COMMAND_PUSH].forEach(function (item) {\n      nextValue.push(item);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {\n    invariantArrayCase(value, spec, COMMAND_UNSHIFT);\n    spec[COMMAND_UNSHIFT].forEach(function (item) {\n      nextValue.unshift(item);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {\n    invariant(Array.isArray(value), 'Expected %s target to be an array; got %s', COMMAND_SPLICE, value);\n    invariant(Array.isArray(spec[COMMAND_SPLICE]), 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]);\n    spec[COMMAND_SPLICE].forEach(function (args) {\n      invariant(Array.isArray(args), 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]);\n      nextValue.splice.apply(nextValue, args);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {\n    invariant(typeof spec[COMMAND_APPLY] === 'function', 'update(): expected spec of %s to be a function; got %s.', COMMAND_APPLY, spec[COMMAND_APPLY]);\n    nextValue = spec[COMMAND_APPLY](nextValue);\n  }\n\n  for (var k in spec) {\n    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n      nextValue[k] = update(value[k], spec[k]);\n    }\n  }\n\n  return nextValue;\n}\n\nmodule.exports = update;"],"sourceRoot":""}