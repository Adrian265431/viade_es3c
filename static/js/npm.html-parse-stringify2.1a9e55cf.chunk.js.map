{"version":3,"sources":["../node_modules/html-parse-stringify2/index.js","../node_modules/html-parse-stringify2/lib/parse.js","../node_modules/html-parse-stringify2/lib/parse-tag.js","../node_modules/html-parse-stringify2/lib/stringify.js"],"names":["module","exports","parse","stringify","tagRE","parseTag","empty","Object","create","pushTextNode","list","html","level","start","ignoreWhitespace","end","indexOf","content","slice","undefined","test","length","push","type","options","components","current","result","arr","byTag","inComponent","replace","tag","index","name","parent","isOpen","charAt","isComment","nextChar","voidElement","children","tagName","attrRE","voidElements","key","i","expectingValueAfterEquals","res","attrs","match","buff","doc","join","attrString","reduce","token","rootEl"],"mappings":"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","file":"static/js/npm.html-parse-stringify2.1a9e55cf.chunk.js","sourcesContent":["module.exports = {\n  parse: require('./lib/parse'),\n  stringify: require('./lib/stringify')\n};","/*jshint -W030 */\nvar tagRE = /(?:<!--[\\S\\s]*?-->|<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+>)/g;\n\nvar parseTag = require('./parse-tag'); // re-used obj for quick lookups of components\n\n\nvar empty = Object.create ? Object.create(null) : {}; // common logic for pushing a child node onto a list\n\nfunction pushTextNode(list, html, level, start, ignoreWhitespace) {\n  // calculate correct end of the content slice in case there's\n  // no tag after the text node.\n  var end = html.indexOf('<', start);\n  var content = html.slice(start, end === -1 ? undefined : end); // if a node is nothing but whitespace, collapse it as the spec states:\n  // https://www.w3.org/TR/html4/struct/text.html#h-9.1\n\n  if (/^\\s*$/.test(content)) {\n    content = ' ';\n  } // don't add whitespace-only text nodes if they would be trailing text nodes\n  // or if they would be leading whitespace-only text nodes:\n  //  * end > -1 indicates this is not a trailing text node\n  //  * leading node is when level is -1 and list has length 0\n\n\n  if (!ignoreWhitespace && end > -1 && level + list.length >= 0 || content !== ' ') {\n    list.push({\n      type: 'text',\n      content: content\n    });\n  }\n}\n\nmodule.exports = function parse(html, options) {\n  options || (options = {});\n  options.components || (options.components = empty);\n  var result = [];\n  var current;\n  var level = -1;\n  var arr = [];\n  var byTag = {};\n  var inComponent = false;\n  html.replace(tagRE, function (tag, index) {\n    if (inComponent) {\n      if (tag !== '</' + current.name + '>') {\n        return;\n      } else {\n        inComponent = false;\n      }\n    }\n\n    var isOpen = tag.charAt(1) !== '/';\n    var isComment = tag.indexOf('<!--') === 0;\n    var start = index + tag.length;\n    var nextChar = html.charAt(start);\n    var parent;\n\n    if (isOpen && !isComment) {\n      level++;\n      current = parseTag(tag);\n\n      if (current.type === 'tag' && options.components[current.name]) {\n        current.type = 'component';\n        inComponent = true;\n      }\n\n      if (!current.voidElement && !inComponent && nextChar && nextChar !== '<') {\n        pushTextNode(current.children, html, level, start, options.ignoreWhitespace);\n      }\n\n      byTag[current.tagName] = current; // if we're at root, push new base node\n\n      if (level === 0) {\n        result.push(current);\n      }\n\n      parent = arr[level - 1];\n\n      if (parent) {\n        parent.children.push(current);\n      }\n\n      arr[level] = current;\n    }\n\n    if (isComment || !isOpen || current.voidElement) {\n      if (!isComment) {\n        level--;\n      }\n\n      if (!inComponent && nextChar !== '<' && nextChar) {\n        // trailing text node\n        // if we're at the root, push a base text node. otherwise add as\n        // a child to the current node.\n        parent = level === -1 ? result : arr[level].children;\n        pushTextNode(parent, html, level, start, options.ignoreWhitespace);\n      }\n    }\n  }); // If the \"html\" passed isn't actually html, add it as a text node.\n\n  if (!result.length && html.length) {\n    pushTextNode(result, html, 0, 0, options.ignoreWhitespace);\n  }\n\n  return result;\n};","var attrRE = /([\\w-]+)|=|(['\"])([.\\s\\S]*?)\\2/g;\n\nvar voidElements = require('void-elements');\n\nmodule.exports = function (tag) {\n  var i = 0;\n  var key;\n  var expectingValueAfterEquals = true;\n  var res = {\n    type: 'tag',\n    name: '',\n    voidElement: false,\n    attrs: {},\n    children: []\n  };\n  tag.replace(attrRE, function (match) {\n    if (match === '=') {\n      expectingValueAfterEquals = true;\n      i++;\n      return;\n    }\n\n    if (!expectingValueAfterEquals) {\n      if (key) {\n        res.attrs[key] = key; // boolean attribute\n      }\n\n      key = match;\n    } else {\n      if (i === 0) {\n        if (voidElements[match] || tag.charAt(tag.length - 2) === '/') {\n          res.voidElement = true;\n        }\n\n        res.name = match;\n      } else {\n        res.attrs[key] = match.replace(/^['\"]|['\"]$/g, '');\n        key = undefined;\n      }\n    }\n\n    i++;\n    expectingValueAfterEquals = false;\n  });\n  return res;\n};","function attrString(attrs) {\n  var buff = [];\n\n  for (var key in attrs) {\n    buff.push(key + '=\"' + attrs[key] + '\"');\n  }\n\n  if (!buff.length) {\n    return '';\n  }\n\n  return ' ' + buff.join(' ');\n}\n\nfunction stringify(buff, doc) {\n  switch (doc.type) {\n    case 'text':\n      return buff + doc.content;\n\n    case 'tag':\n      buff += '<' + doc.name + (doc.attrs ? attrString(doc.attrs) : '') + (doc.voidElement ? '/>' : '>');\n\n      if (doc.voidElement) {\n        return buff;\n      }\n\n      return buff + doc.children.reduce(stringify, '') + '</' + doc.name + '>';\n  }\n}\n\nmodule.exports = function (doc) {\n  return doc.reduce(function (token, rootEl) {\n    return token + stringify('', rootEl);\n  }, '');\n};"],"sourceRoot":""}